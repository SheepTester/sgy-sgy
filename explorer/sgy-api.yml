fields:
  school:
    fields:
      - field: id
        name: School Id
        description: The internal Schoology ID that identifies the school. This field cannot be used in create operations; only update and read operations.
        type: string
      - field: title
        name: School Title
        description: The name of the school
        type: string
        required: true
      - field: address1
        name: Street address line 1
        description: The first line of the school's street address
        type: string
      - field: address2
        name: Street address line 2
        description: The second line of the school's street address
        type: string
      - field: city
        name: City
        description: The city where the school is located
        type: string
      - field: state
        name: State
        description: The state/province where the school is located
        type: string
      - field: postal_code
        name: Postal code
        description: The postal code where the school is located
        type: string
      - field: country
        name: Country
        description: The country where the school is located
        type: string
      - field: website
        name: Website
        description: The school's website address
        type: string
      - field: phone
        name: Phone number
        description: The school's phone number
        type: string
      - field: fax
        name: Fax Number
        description: The school's fax number
        type: string
      - field: picture_url
        name: Profile Picture URL
        description: The full URL of the school's profile picture
        type: string
  building:
    note: Buildings have the same fields as schools.
    fields:
      - field: id
        name: Building Id
        description: The internal Schoology ID that identifies the building. This field cannot be used in create operations; only update and read operations.
        type: string
      - field: title
        name: Building Title
        description: The name of the building
        type: string
        required: true
      - field: address1
        name: Street address line 1
        description: The first line of the building's street address
        type: string
      - field: address2
        name: Street address line 2
        description: The second line of the building's street address
        type: string
      - field: city
        name: City
        description: The city where the building is located
        type: string
      - field: state
        name: State
        description: The state/province where the building is located
        type: string
      - field: postal_code
        name: Postal code
        description: The postal code where the building is located
        type: string
      - field: country
        name: Country
        description: The country where the building is located
        type: string
      - field: website
        name: Website
        description: The building's website address
        type: string
      - field: phone
        name: Phone number
        description: The building's phone number
        type: string
      - field: fax
        name: Fax number
        description: The building's fax number
        type: string
      - field: building_code
        name: Building Code
        description: The configurable external ID of this building (used for imports and synchronization)
        type: string
      - field: picture_url
        name: Profile Picture URL
        description: The full URL of the school's profile picture
        type: string
  user:
    note: |-
      Users objects are the accounts on the system.
      * Denotes fields are only displayed if the current API user has the 'Administer users' permission enabled.
    fields:
      - field: uid
        name: User ID
        description: The internal Schoology ID of the user
        type: string
      - field: school_id
        name: Schoology School ID
        description: The internal Schoology ID of the school to which the user belongs
        type: string
      - field: building_id
        name: Schoology School Building ID
        description: The internal Schoology ID of the school building to which the user belongs
        type: string
      - field: school_uid*
        name: Unique ID
        description: The user's unique ID (e.g. student ID, SIS ID)
        type: string
        required: true
      - field: name_title
        name: Name Title
        description: "The user's title, must be one of the following: Mr., Mrs., Ms., Miss, Dr., Professor"
        type: string
      - field: name_title_show
        name: Show Name Title
        description: Whether to show the user's title when displaying his/her full name
        type: "{0,1}"
      - field: name_first
        name: First Name
        description: The user's first name
        type: string
        required: true
      - field: name_first_preferred
        name: Preferred First Name
        description: The name by which the user goes
        type: string
      - field: name_middle
        name: Middle Name
        description: The user's middle name
        type: string
      - field: name_middle_show
        name: Show Middle Name
        description: Whether to show the user's middle name when displaying his/her full name
        type: string
      - field: name_last
        name: Last Name
        description: The user's last name
        type: string
        required: true
      - field: name_display
        name: Display Name
        description: A fully-constructed name based on the user's account settings. Cannot be set - only available on GET.
        required: false
      - field: username*
        name: Username
        description: The user's username (either a username or email address is required for each user)
        type: string
        required: username or email
      - field: primary_email
        name: Primary Email Address
        description: The user's primary email address (either a username or email address is required for each user)
        type: string
        required: username or email
      - field: position
        name: Job Position
        description: The user's position in the school/company.
        type: string
      - field: gender
        name: Gender
        description: The user's gender
        type: "{M,F}"
      - field: grad_year*
        name: Graduation Year
        description: The user's graduation year (YYYY)
        type: 4 digit integer
      - field: birthday_date
        name: Birthday
        description: The user's birthday (YYYY-MM-DD)
        type: string
      - field: password*
        name: Password
        description: The user's password (existing passwords will not be changed if left blank)
        type: string
      - field: role_id*
        name: Role ID
        description: The ID of the role to which you would like to assign the user
        type: integer
        required: true
      - field: email_login_info
        name: Email Login Information
        description: Whether to send login information by email (if an email address is set); used only during user creation
        type: "{0,1}"
      - field: profile_url
        name: Profile picture URL
        description: The full URL of the user's profile picture
        type: string
      - field: tz_name*
        name: Timezone Name
        description: An IANA-defined timezone name (see http://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
      - field: parents
        name: User Parents
        description: The user accounts of the user's parents; requires 'View user parents' permission to be enabled for the current API user.
        type: user objects
      - field: parent_uids
        name: User Parent User Ids
        description: When creating/updating user accounts, a comma delimited list of the user's parents' user ids. API users must have permission to create users in order to create/update these associations.
        type: comma-delimited list of integers
      - field: advisor_uids
        name: User Advisor User Ids
        description: When creating/updating user accounts, a comma delimited list of the user's advisors' user ids. API users must have permission to create users in order to create/update these associations.
        type: comma-delimited list of integers
      - field: child_uids
        name: User Child User Ids
        description: A comma-delimited list of user ids identifying the user's children.
        type: comma-delimited list of integers
      - field: send_message
        name: Send Message status
        description: Whether or not the signed-in user can send a private message to the listed user
        type: integer
      - field: synced
        name: Sync Status
        description: Whether or not this user was synced with an external system (eg, Student Information System). The default value is 0. For synced users, the Unique ID field is not editable through Schoology.
        type: "{0,1}"
      - field: profile_picture_fid
        name: Profile Picture File ID
        description: "ID pointing to temporary save of the profile picture upload (write-only). For more details on uploading files: File Uploading"
        type: integer
      - field: additional_buildings
        name: Additional Buildings
        description: The internal building IDs to which the user belongs to as a non-main building
        type: Comma-delimited list of integers
  detailed profile:
    note: |-
      Detailed profile fields can be added to the user object with the ?extended=TRUE argument. The following read-only fields will be included in the user object in the sub attribute profile_info
      *Fields only included if the user is a course realm admin
    fields:
      - field: subjects_taught
        name: Subjects Taught*
        description: The subjects taught by a teacher.
        type: string
      - field: grades_taught
        name: Grades Taught*
        description: The grades taught by a teacher
        type: string
      - field: position
        name: Position*
        description: A user generated description of their position
        type: string
      - field: department*
        name: Department
        description: A user generated description of their department.
        type: string
      - field: bio
        name: Biography
        description: A user generated short bio on themselves.
        type: string
      - field: phone
        name: Phone
        description: The phone number of the user
        type: string
      - field: website
        name: Website
        description: User Website
        type: string
      - field: address
        name: Address
        description: User Address
        type: string
      - field: interests
        name: Interests
        description: User Interests
        type: string
      - field: activities
        name: Activities
        description: User Activities
        type: string
      - field: birthday_date
        name: Birthday
        description: The user's birthday
        type: string
  association:
    fields:
      - field: student_school_uid
        name: Unique ID
        description: The student's unique ID
        type: string
        required: true
      - field: parent_school_uid / advisor_school_uid
        name: Unique ID
        description: The parent's / advisor's unique ID
        type: string
        required: true
      - field: delete
        name: Delete
        description: Whether or not to delete this association if it exists
        type: (0 ,1)
  group:
    fields:
      - field: id
        name: Schoology Group ID
        description: The internal Schoology ID of the group
        type: string
        required: false
      - field: building_id
        name: Schoology School Building ID
        description: The internal Schoology ID of the school building to which the group belongs
        type: string
        required: false
      - field: school_id
        name: Schoology School ID
        description: The internal Schoology ID of the school to which the group belongs
        type: string
        required: false
      - field: title
        name: Group Title
        description: The title of the group
        type: string
        required: true
      - field: description
        name: Description
        description: The group description
        type: string
      - field: picture_url
        name: Picture
        description: The URL of the group's profile picture
        type: string
      - field: website
        name: Website
        description: The group website
        type: string
      - field: access_code
        name: Access Code
        description: The access code that users can use to join the group (only admins can see this value).
        type: string
      - field: privacy_level
        name: Privacy level
        description: |-
          The privacy of the group.
          everyone: All schoology users can see the group.
          school: Only members of the school can see the group
          building: Only members of the building can see the group
          group: Only group members can see the group
          custom: Custom privacy settings (read only; not supported in POST/PUT)
        type: "{everyone, school, building, group}"
        required: "Default: school"
      - field: category
        name: Category
        description: The category of the group (see below on how to retrieve a list of available categories)
        type: string
        required: false
      - field: options/invite_type
        name: Invite Type
        description: |-
          How members can join the group.
          0: Invite only
          1: Request to join
          2: Anyone can join
        type: "{0-2}"
        required: "Default: 0"
      - field: options/member_post
        name: Post a group update
        description: Whether or not a group member can post a group update
        type: "{0,1}"
        required: "Default: 1"
      - field: options/member_post_comment
        name: Post a comment on a group update
        description: Whether or not a group member can post comments to group udpates
        type: "{0,1}"
        required: "Default: 1"
      - field: options/create_discussion
        name: Create a discussion thread
        description: Whether or not a group member can create a discussion thread
        type: "{0,1}"
        required: "Default: 0"
      - field: options/create_files
        name: Create files
        description: Whether or not members can create resources for the group
        type: "{0,1}"
        required: "Default: 0"
      - field: group_code
        name: Group Code (external ID)
        description: If the group was imported from another system into Schoology, the unique ID of that group in the other system.
        type: string
  course:
    note: Courses are parent objects to course sections; they are mere placeholders and cannot be used to upload documents, assignments, etc.
    fields:
      - field: id
        name: Schoology Course ID
        description: The internal Schoology ID of the course
        type: string
        required: false
      - field: building_id
        name: Schoology School Building ID
        description: The internal Schoology ID of the school building to which the course belongs
        type: string
        required: false
      - field: title
        name: Course Title
        description: The title of the course
        type: string
        required: true
      - field: course_code
        name: Course Code
        description: The course code must be unique across the entire school (e.g. ENG101)
        type: string
        required: true
      - field: department
        name: Department Name
        description: The department name (e.g. English)
        type: string
      - field: description
        name: Description
        description: The course description
        type: string
      - field: credits
        name: Credits
        description: The number of credits this course is worth
        type: double
      - field: synced
        name: Sync Status
        description: Whether or not this course was synced with an external system (eg, Student Information System). The default value is 0. For synced courses, the Course Code field is not editable through Schoology.
        type: "{0,1}"
      - field: grade_level_range_start
        name: Grade Level Range Start
        description: The lowest (or only) grade level in the course.
        type: integer {1, 2, 3, ..., 15}
      - field: grade_level_range_end
        name: Grade Level Range End
        description: The highest grade level in the course - must be great than grade_level_range_start if used.
        type: integer {1, 2, 3, ..., 15}
      - field: subject_area
        name: Subject Area
        description: The subject area of the course
        type: integer {1, 2, 3, ..., 9}
  course section:
    note: Teachers and students are enrolled into course sections; each section must belong to a parent course. Assignments, documents, events, and other materials are created and associated with course sections.
    fields:
      - field: id
        name: Schoology Section ID
        description: The internal Schoology ID of the section
        type: string
        required: no
      - field: title (section_title allowed in POST/PUT)
        name: Section Title
        description: The section title (e.g. Section 10b).
        type: string
        required: yes
      - field: section_code
        name: Section Code
        description: The section code must be unique across the course and grading period (e.g. "Spring 2010" can only have one "10b" for course "ENG101").
        type: string
        required: Either section_code or section_school_code must be set. If both are specified section code will be ignored and section school code will be used.
      - field: section_school_code
        name: Section School Code
        description: The section school code must be unique across the school
        type: string
        required: Either section_code or section_school_code must be set. If both are specified section code will be ignored and section school code will be used.
      - field: access_code
        name: Access Code
        description: The access code is created by Schoology automatically, and cannot be adjusted. If this field is blank, the course cannot be enrolled in via access code
        type: string
        required: no
      - field: grading_periods
        name: Grading Periods
        description: The grading period IDs with which this course is associated.
        type: array of integers
        required: yes
      - field: description
        name: Description
        description: The section description.
        type: string
      - field: profile_url
        name: Profile picture URL
        description: The full URL of the section's profile picture
        type: string
      - field: location
        name: Location
        description: The location of the course section.
        type: string
      - field: meeting_days
        name: Meeting Days
        description: Days of the week that this course section meets. Each day is represented by a number (Sun is 0, Sat is 7).
        type: array of integers
      - field: start_time
        name: Start Time
        description: The time this section starts on the specified meeting days, from 00:00 to 23:59 (local time). Not applicable if your school uses class period blocks (i.e. sections meet at different times on different days).
        type: string (HH:mm)
      - field: end_time
        name: End Time
        description: The time this section ends on the specified meeting days.
        type: string (HH:mm)
      - field: class_periods
        name: Class Periods
        description: The class period IDs with which this course is associated. Not applicable if your school does not use class period blocks (see start_time).
        type: array of integers
      - field: options/course_format
        name: Course Format
        description: The course format - 1 for basic (default), 2 for topic-based
        type: "{1,2}"
        required: "default: 1"
      - field: options/weighted_grading_categories
        name: Weighted Grading Categories
        description: Whether grading categories for this course are weighted; otherwise, categories will be weighted evenly.
        type: "{0,1}"
        required: "default: 0"
      - field: options/upload_document
        name: Upload Documents
        description: Whether students can upload documents to the course profile.
        type: "{0,1}"
        required: "default: 0"
      - field: options/create_discussion
        name: Create Discussion Topic
        description: Whether students can create discussion topics.
        type: "{0,1}"
        required: "default: 0"
      - field: options/member_post
        name: Post to Course Feed
        description: Whether students can post to the course feed.
        type: "{0,1}"
        required: "default: 0"
      - field: options/member_post_comment
        name: Post Course Feed Comments
        description: Whether students can post comments to course feed entries.
        type: "{0,1}"
        required: "default: 0"
      - field: synced
        name: Sync Status
        description: Whether or not this course section was synced with an external system (eg, Student Information System). The default value is 0. For synced course sections, the Section School Code field is not editable through Schoology.
        type: "{0,1}"
  grading category:
    note: List the available grading categories for the given course section
    fields:
      - field: title
        name: Grading category title
        description: The name of the grading category
        type: integer
      - field: calculation_type
        name: Calculation type
        description: Whether the grades for the given category are calculated as a percentage (1) or as points (2). Only course section administrators can see this value.
        type: "{1,2}"
      - field: default_max_points
        name: Default max points
        description: The default number of max points given to assignments in this category. Only course section administrators can see this value.
        type: integer
      - field: default_grading_scale_id
        name: Default grading scale Id
        description: The default grading scale assigned to assignments in this category. Only course section administrators can see this value.
        type: integer
      - field: drop_lowest
        name: Drop lowest
        description: Indicates the number of lower most grades to drop when calculating the final grade for the given category. Only course section administrators can see this value.
        type: integer
  enrollment:
    note: Enrollments associate users to courses or groups.
    fields:
      - field: id
        name: Enrollment ID
        description: The Schoology assigned ID of the enrollment record.
        type: string
        required: no
      - field: uid
        name: User ID
        description: The Schoology ID of the user.
        type: string
        required: yes
      - field: admin
        name: Admin
        description: Whether this user is an administrator (e.g. teacher) as opposed to a regular member (e.g. student)
        type: "{0,1}"
        required: yes
      - field: status
        name: Status
        description: |-
          The current status of the enrollment.
          1: Active
          2: Expired (i.e. past course)
          3: Invite pending
          4: Request Pending
          5: Archived (Course specific status members can be placed in before being fully unenrolled)
        type: "{1-5}"
        required: yes
  event:
    fields:
      - field: id
        name: Schoology Event ID
        description: The internal Schoology ID of the event
        type: string
        required: yes
      - field: title
        name: Title
        description: The event title
        type: string
        required: yes
      - field: description
        name: Description
        description: The event description
        type: string
      - field: start
        name: Start
        description: The start of the event
        type: datetime(YYYY-MM-DD HH:MM:SS)
        required: yes
      - field: has_end
        name: Has End
        description: Whether or not this event has an end date/time
        type: "{0,1}"
        required: "default: 0"
      - field: end
        name: End
        description: The end of the event, if has_end is 1.
        type: datetime(YYYY-MM-DD HH:MM:SS)
      - field: all_day
        name: All Day
        description: Whether or not this event is an all-day event (i.e. no time, just start/end day)
        type: "{0,1}"
        required: "default: 0"
      - field: rsvp
        name: RSVP Settings
        description: Determines who is allowed to RSVP into this event. 0 implies that no one can RSVP. 1 implies that only people who have been invited to the events can RSVP. 2 implies that anyone can RSVP.
        type: "{0,1,2}"
        required: "default: 0"
      - field: comments_enabled
        name: Enable Comments
        description: Determine whether or not users can have a discussion within the event.
        type: "{0,1}"
        required: "default: 1"
      - field: type
        name: Event Type
        description: Determine the type of the event. 'event' implies that the event is a normal event. 'assignment' implies that the event is a due event for an assignment. 'discussion' implies that the event is a due event for a discussion.
        type: "{'event', 'assignment', 'discussion'}"
  blog post:
    note: Blog posts can be made for any realm.
    fields:
      - field: title
        name: Title
        description: The post title
        type: string
        required: true
      - field: body
        name: Post body
        description: The post body
        type: string (rendered as HTML - line breaks need a <br />
  blog post comment:
    note: Comments can be made for any blog post.
    fields:
      - field: id
        name: Schoology Blog ID
        description: The internal Schoology ID of the blog
        type: string
        required: true
      - field: comment
        name: Comment
        description: The comment body
        type: string
        required: true
      - field: uid
        name: User ID
        description: The user ID of the user who posted the comment
        type: string
  discussion thread:
    note: Discussion threads can be made for any realm except users.
    fields:
      - field: id
        name: Schoology Discussion ID
        description: The internal Schoology ID of the discussion
        type: string
        required: true
      - field: title
        name: Title
        description: The thread title
        type: string
        required: true
      - field: body
        name: Thread Body
        description: The thread body
        type: string
      - field: graded
        name: Graded
        description: Whether or not the discussion is graded
        type: integer {0,1}
      - field: due
        name: Due Date
        description: When the assignment is due
        type: datetime(YYYY-MM-DD HH:MM:SS)
      - field: grade_item_id
        name: Grade Item ID
        description: The Id of the grade item associated with this discussion. Mostly used for grades.
        type: integer
      - field: grading_scale
        name: Grading Scale
        description: The ID of the grading scale for this assignment. For no grading scale, use "0". Course grading scales can be found on the course Grade Setup page.
        type: integer
        required: "default: 0"
      - field: grading_period
        name: Grading Period
        description: The grading period ID to which this assignment belongs. For "Other", use "0".
        type: integer
        required: "default: 0"
      - field: grading_category
        name: Grading Category
        description: The grading category ID to which this assignment belongs
        type: integer
        required: "default: 0"
      - field: max_points
        name: Maximum Points
        description: The maximum number of points for this assignment (excl. extra credit)
        type: float
        required: "default: 100"
      - field: factor
        name: Factor
        description: The relative weight of this assignment
        type: float
        required: "default: 1.0"
      - field: is_final
        name: Is a Final
        description: Mark this assignment as a midterm or final
        type: "{0,1}"
        required: "default: 0"
      - field: published
        name: Published
        description: Whether or not the discussion is published. Only applies to section discussions NOT associated with topics.
        type: "{0,1}"
        required: "default: 1"
      - field: require_initial_post
        name: Requires Initial Post
        description: Flag indicating whether a member needs to participate before seeing other member posts
        type: "{0,1}"
        required: "default: 0"
  discussion reply:
    note: Discussion replies are comments to any discussion thread.
    fields:
      - field: uid
        name: User Id
        description: The Schoology user id of the user who created the comment
        type: integer
      - field: comment
        name: Comment
        description: The comment/reply text
        type: string
        required: true
      - field: created
        name: Created timestamp
        description: The Unix timestamp when the comment was created
        type: integer
      - field: parent_id
        name: Parent Id
        description: If this comment is in reply to another comment, specify it here. To reply to the discussion thread instead of a specific comment, set the parent to "0".
        type: integer
        required: false
      - field: status
        name: Comment status
        description: Whether or not the comment was deleted. Only available for course admins with 'manage discussion' permission.
        type: "{1,0}"
  updates:
    fields:
      - field: body
        name: Body
        description: The body text of the update
        type: string
        required: true
      - field: uid
        name: Posting user ID
        description: The user ID of the user who posted the update.
        type: string
      - field: display_name
        name: Posting user display name
        description: The display name of the user who posted the update.
        type: string
      - field: last_updated
        name: Last updated timestamp
        description: The unix timestamp of the most recent time the post was created/modified.
        type: string
      - field: attachment/type
        name: Attachment type
        description: For updates with attachments, the type of the attachment
        type: "{'file','link','video'}"
      - field: attachment/title
        name: Attachment title
        description: The display value of the link to the attachment
        type: string
      - field: attachment/url
        name: Attachment URL
        description: The absolute URL of the attachment
        type: string
      - field: attachment/thumbnail
        name: Attachment thumbnail
        description: For attachments of type 'link', a thumbnail screenshot of the linked page
        type: string
      - field: poll/options
        name: Poll options
        description: For updates with polls attached to them, this array will hold all of the poll's options.
        type: array
      - field: poll/options/title
        name: Poll option title
        description: The title and displayable name of the given poll option
        type: string
      - field: poll/options/count
        name: Poll option vote count
        description: The number of users who have selected this option in the poll
        type: int
      - field: poll/options/selected
        name: Poll option selected
        description: This variable is true if the current user selected this poll item
        type: bool
  reminder:
    note: |-
      The API supports the viewing of realm specific reminders that mirror the functionality of the reminder widget on the web
      Fields will differ depending on the type of reminder (ungraded, resubmitted)
    fields:
      - field: type
        name: Type
        description: type of reminder
        type: string of one of the supported reminder types
      - field: count
        name: Count
        description: The number of reminders
        type: integer
  update comment:
    fields:
      - field: comment
        name: Comment
        description: The comment text
        type: string
        required: true
      - field: uid
        name: User ID
        description: The ID of the user who created the comment
        type: integer
  media album:
    fields:
      - field: Title
        name: title
        description: The album title
        type: string
        required: true
      - field: Description
        name: description
        description: The album description
        type: string
        required: false
      - field: Comments setting
        name: setting_comments
        description: Whether or not comments are enabled for media album content
        type: "{0,1}"
      - field: Member post setting
        name: setting_member_post
        description: Whether or not non-admins can add content to the media album
        type: "{0,1}"
      - field: Published
        name: published
        description: Whether or not the media album is published
        type: "{0,1}"
      - field: Photo count
        name: photo_count
        description: The number of images in the album
        type: integer
      - field: Video count
        name: video_count
        description: The number of video files in the album
        type: integer
      - field: Audio count
        name: audio_count
        description: The number of audio files in the album
        type: integer
      - field: Cover image URL
        name: cover_image_url
        description: The full URL of the cover image
        type: string
      - field: Created timestamp
        name: created
        description: The unix timestamp when the media album was created
        type: integer
  media album comments:
    fields:
      - field: content_id
        name: Content ID
        description: The ID of the content related to the comment
        type: integer
        required: true
      - field: uid
        name: User ID
        description: The ID of the user who created the comment
        type: integer
      - field: comment
        name: Comment
        description: The comment text
        type: string
      - field: created
        name: Created timestamp
        description: The unix timestamp when the comment was created
        type: integer
  documents:
    note: Documents are currently supported in Courses and Schools.  On the website, group documents are done through Resources.  Documents are simple pieces of content that simply have one attachment.  Because a document must have an attachment, all available document have attachments just like an piece of content that accepts the with_attachment query parameter.  If you pass in the with_attachment parameter you will get the same response as the request without the parameter.
    fields:
      - field: id
        name: ID
        description: The Unique ID of the document
        type: integer
        required: false
      - field: title
        name: Title
        description: The Document Title
        type: string
      - field: course_fid
        name: Course Folder ID
        description: The course folder ID this content is in.  Only applicable if realm = course
        type: integer
      - field: available
        name: Available
        description: Is this available under course completion rules
        type: integer {0,1}
      - field: published
        name: Published
        description: Is this piece of content published (1) or unpublished (0)
        type: integer {0,1}
      - field: attachments
        name: Attachment
        description: Attachment array
        type: array
      - field: url
        name: URL
        description: For creating documents with link or embed, send the value in this field
        type: string
      - field: display_inline
        name: Display Inline
        description: For creating documents with links, this field determines whether the link will open in an iframe (1) or a new tab (0)
        type: integer {0,1}
      - field: file-attachments
        name: File
        description: For creating documents with files, follow the standard file attachment technique
        type: array
  grading scales:
    fields:
      - field: id
        description: The ID of the grading scale
        type: integer
      - field: title
        description: The title of the grading scale
        type: string
      - field: type
        description: 1 corresponds to "Classic 5pt chromatic" or other "Percent" scales. 3 corresponds to "Point" scales. 0 corresponds to "Numeric"
        type: integer
      - field: auto_averaging
        description: Automatically calculate average values for each level
        type: integer
      - field: hide_numeric
        description: If 1, student will only see the letter grade
        type: integer
  grading rubrics:
    fields:
      - field: id
        description: The ID of the grading rubric
        type: integer
      - field: created
        description: The created timestamp of the grading rubric
        type: string
      - field: title
        description: The title of the grading rubric
        type: string
      - field: total points
        description: The total points of the grading rubric
        type: integer
      - field: realm
        description: The Schoology realm of the grading rubric (section)
        type: string
      - field: realm_id
        description: The Schoology realm id of the grading rubric (section id)
        type: integer
  grading categories:
    fields:
      - field: id
        description: The ID of the grading category
        type: integer
      - field: title
        description: The title of the grading category
        type: string
      - field: calculation_type
        description: 1 corresponds to "Percent". 2 corresponds to "Total pts"
        type: integer
      - field: default_max_points
        description: 'The default # of points to give to assignments when created'
        type: float
      - field: default_grading_scale_id
        description: 0 for numeric grading scale, or the id of the grading scale
        type: integer
      - field: drop_lowest
        description: Number of low scores to drop in the category
        type: integer {0-10}
      - field: weight
        description: Category weight
        type: integer
      - field: delta
        description: List order of the category
        type: integer
  grading groups:
    fields:
      - field: id
        description: The ID of the grading group
        type: integer
        required: false
      - field: title
        description: The title of the grading group
        type: string
        required: true
      - field: section_id
        description: The Schoology section id that the grading group is in
        type: integer
        required: false
      - field: members
        description: An array of enrollment ids part of the grading group
        type: array of integers
        required: false
values:
  - meaning: Grade Level
    for:
    - grade_level_range_start
    - grade_level_range_end
    values:
      - value: 0
        meaning: No grade level/remove grade level
      - value: 1
        meaning: Pre-K
      - value: 2
        meaning: K
      - value: 3
        meaning: 1
      - value: 4
        meaning: 2
      - value: 5
        meaning: 3
      - value: 6
        meaning: 4
      - value: 7
        meaning: 5
      - value: 8
        meaning: 6
      - value: 9
        meaning: 7
      - value: 10
        meaning: 8
      - value: 11
        meaning: 9
      - value: 12
        meaning: 10
      - value: 13
        meaning: 11
      - value: 14
        meaning: 12
      - value: 15
        meaning: Higher-Ed
  - meaning: Subject Area
    for:
    - subject_area
    values:
      - value: 0
        meaning: Other
      - value: 1
        meaning: Health & Physical Education
      - value: 2
        meaning: Language Arts
      - value: 3
        meaning: Mathematics
      - value: 4
        meaning: Professional Development
      - value: 5
        meaning: Science
      - value: 6
        meaning: Social Studies
      - value: 7
        meaning: Special Education
      - value: 8
        meaning: Technology
      - value: 9
        meaning: Arts
resources:
  - name: District
    description: Districts are groups of independent schools that do not share a common system (e.g. SIS)
    urls: []
    operations: []
  - name: School
    description: Schools are the most basic groupings of courses, groups, and users. All courses/users are required to have unique usernames, course IDs, and School User IDs throughout the entire school.
    urls:
      - schools
      - schools/{id}
    operations:
      - name: view
        description: View a specified school
        path: schools/{id}
        method: GET
        content: null
        return: An object containing school fields
      - name: create
        description: Create a school
        path: schools
        method: POST
        content: An object containing school fields
        return: An object containing school fields
      - name: create
        description: Create a building in school
        path: schools/{school id}/buildings
        method: POST
        content: An object containing school fields
        return: An object containing school fields
      - name: edit
        description: Edit a specified school
        path: schools/{id}
        method: PUT
        content: An object containing school fields
      - name: delete
        description: Delete a specified school
        path: schools/{id}
        method: DELETE
  - name: Building
    description: Buildings (AKA campuses), are further separations of courses, groups, and users that all belong to the same system.
    urls:
      - schools/{id}/buildings
    operations-note: For other operations related to buildings (i.e. GET,POST,PUT,DELETE) you can treat buildings like schools and use the available school object endpoints. For example, to make a change to an existing building, you would use PUT /school/[building_id]. For more details, check out the School Object.
    operations:
      - name: view
        description: View the buildings for a school
        path: schools/{id}/buildings
        method: GET
        content: null
        return: An list of buildings containing building fields
  - name: User
    description: Each account corresponds to a user object.
    urls:
      - users
      - users/{id}
    operations:
      - name: create
        description: Create a user in your school
        path: users
        method: POST
        content: An object containing user fields
        return: An object containing user fields
      - name: bulk create
        description: "Create multiple users at a time. The following parameters can be added to this endpoint:"
        parameters:
          update_existing: Set this to 1 (e.g. ?update_existing=1) in order update existing users, matched by the 'school_uid' field. Without this parameter, user creation will fail if a pre-existing user has the same 'school_uid' as a passed user object.
          ignore_email_conflicts: If set to 1 and one of the users to be created has the same email address as another account in a different school, the user will be created without an email address. If a username was not specified, one will be generated based on the school_uid parameter. If this flag is not specified or if the conflict is with another account in the same school, an error will be thrown.
          email_conflict_resolution: |-
            - set to 1 (e.g. ?email_conflict_resolution=1) to create an account in your school with a username if an email account already exists within Schoology. (Eg - If john@schoology.com already exists, the new account will be created with only a username 'john'). If a new username is present, the new account will be created using that username.
            - set to 2 (e.g. ?email_conflict_resolution=2) to merge duplicate Schoology accounts with [email]@[verified_domain] into the new account that you're creating. However, if an email acount differs from your claimed domain, an account will be created using only a username.
        path: users
        method: POST
        content: Multiple users can be created at a time (up to 50) by wrapping your response in 'users', with user fields wrapped in 'user'.
        return: The API endpoint (location) of each user created, or an error message if there was a problem creating the user.
      - name: list
        description: "View a list of users in your school (paged). If your school has multiple buildings and you are not an administrator for all buildings, only users in your same building will be returned. Administrators for all buildings (i.e. administrators that are not associated with a specific building) will have users in all buildings returned and can optionally filter results with the following query strings:"
        parameters:
          building_id: Only return users for the given building.
          role_ids: (Comma-separated list of IDs) Only return users who belong to the given role IDs
          parent_access_codes: Add in parent access codes for each of the returned users (set to 1)
          school_uids: A comma-separated list of school_uids within the school (up to 50 at one time)
        path: users
        method: GET
        content: null
        return: A collection of user objects, each one containing user fields
      - name: list
        description: View a list of inactive users in your school
        path: users/inactive
        method: GET
        content: null
        return: A collection of user objects, each one containing user fields
      - name: view
        description: View a specified user
        path: users/{id}
        method: GET
        content: null
        return: An object containing user fields
      - name: view
        description: View a specified inactive user
        path: users/inactive/{id}
        method: GET
        content: null
        return: An object containing user fields
      - name: update
        description: Modify a user
        path: users/{id}
        method: PUT
        content: An object containing user fields
        return: null
      - name: bulk update
        description: Modify multiple users
        path: users
        method: PUT
        content: Up to 50 users can be updated at a time by wrapping your response in 'users', with user fields wrapped in 'user'.
        return: The schoology ID of each user updated, or an error message if there was a problem creating the user.
      - name: bulk update (re-activate)
        description: Re-activate inactive users.
        parameters:
          option_reenroll: Set option_reenroll to 1 in the request body to place the user back into their courses and groups.
        path: users/reactivate
        method: PUT
        content: An object containing user fields
        return: A link to the user profiles of the reactivated users
      - name: delete
        description: "Delete a user (cannot be undone). The following parameters can be added to this endpoint:"
        parameters:
          option_comment: Reason for marking inactive
          option_keep_enrollments: "Set this to 1 (e.g. ?option_keep_enrollments=1) to keep a history of the user's grade and attendance data. Note: if this parameter is not set, this endpoint will delete all history of the user's grades and attendance records. This process cannot be reversed"
          email_notification: Whether or not the deleted user should be notified via email that their account has been made inactive. If set to 1, email will be sent. If set to 0, email will not be sent. If this parameter is not used, emails will be sent by default.
        path: users/{id}
        method: DELETE
        content: null
        return: null
      - name: bulk delete
        description: "Delete up to 50 users. The following parameters can be added to this endpoint:"
        parameters:
          uids: Comma-separated list of Schoology IDs
          option_comment: Reason for marking inactive
          option_keep_enrollments: "Set this to 1 (e.g. ?option_keep_enrollments=1) to keep a history of the user's grade and attendance data. Note: if this parameter is not set, this endpoint will delete all history of the user's grades and attendance records. This process cannot be reversed"
          email_notification: Whether or not the deleted user should be notified via email that their account has been made inactive. If set to 1, email will be sent. If set to 0, email will not be sent. If this parameter is not used, emails will be sent by default.
        path: users
        method: DELETE
        content: null
        return: null
      - name: Bulk Import Associations
        description: |-
          Create parent-child or advisor-advisee associations.
          - Two separate endpoints depending on the type of association.
        path: users/import/associations/advisors
        method: POST
        content: An object containing association fields
        return: The students school_uid and uid and the advisors school_uid and uid OR any relevant error messages.
      - name: Bulk Import Associations
        description: |-
          Create parent-child or advisor-advisee associations.
          - Two separate endpoints depending on the type of association.
        path: users/import/associations/parents
        method: POST
        content: An object containing association fields
        return: The students school_uid and uid and the parents school_uid and uid OR any relevant error messages.
      - name: Other Calls
        description: A shortcut for GET users/{user_id} where {user_id} is the user ID of the current API user.
        path: users/me
        method: GET
      - name: Other Calls
        description: If the user has an active Schoology web session, it returns the user id for the passed OAuth tokens and the Schoology web session timestamp. Use this information to validate the given access tokens for the logged in user and to check if the user has an active Schoology web session
        path: app-user-info
        method: GET
        content: null
        return: "{ web_session_timestamp, api_uid }"
      - name: Other Calls
        description: Returns a list of all currently available interfaces languages. Use the language code property from returned language objects when creating/updating user languages
        path: users/languages
        method: GET
        content: null
        return: "{ language: { language_code, language_name }[] }"
  - name: Group
    description: Groups are non-academic versions of course sections; they can hold members, events, documents, etc.
    urls:
      - groups
      - groups/{id}
    operations:
      - name: create
        description: Create a group
        path: groups
        method: POST
        content: An object containing group fields
        return: An object containing group fields
      - name: list
        description: "View a list of groups in your school (paged). You can use the following parameters to filter the resultset:"
        parameters:
          building_id: return only groups for the given building_id.
        path: groups
        method: GET
        content: null
        return: A collection of group objects, each one containing group fields
      - name: view
        description: View a specified group
        path: groups/{id}
        method: GET
        content: null
        return: An object containing group fields
      - name: update
        description: Modify a group
        path: groups/{id}
        method: PUT
        content: An object containing group fields
        return: null
      - name: delete
        description: Delete a group (cannot be undone)
        path: aaaa
        method: DELETE
        content: null
        return: null
      - name: list group categories
        description: View a list of group categories.
        path: groups/categories
        method: GET
        content: null
        return: A collection of category objects, each one containing category fields
  - name: Course
    description: Courses are simply containers for course sections. Objects cannot belong to courses; they can only belong to course sections.
    urls:
      - courses
      - courses/{id}
    operations:
      - name: create
        description: Create a course
        path: courses
        method: POST
        content: An object containing course fields
        return: An object containing course fields
      - name: bulk create
        description: "Create multiple courses (up to 50) in a single API call. The following querystring parameters can be added to this endpoint:"
        parameters:
          update_existing: Set this to 1 (e.g. ?update_existing=1) in order to update existing courses, matched by the 'course_code' field. Without this parameter, creating a course will fail if another course already exists with the same 'course_code' already.
        path: courses/
        method: POST
        content: Multiple courses can be created at a time (up to 50) by wrapping your response in 'course', with course fields wrapped in 'course'. Sections can be also be created at the same time - combined with the update_existing parameter, this can be used for importing or synchronization.
        return: The API endpoint (location) of each course created, or an error message if there was a problem creating the course.
      - name: list
        description: "View a list of courses in your school (paged), with the option to filter results with the following query strings:"
        parameters:
          building_id: Only return courses for the given building.
        path: courses
        method: GET
        content: null
        return: A collection of course object, each one containing course fields
      - name: view
        description: View a specified course
        path: courses/{id}
        method: GET
        content: null
        return: An object containing course fields
      - name: update
        description: Modify a course
        path: courses/{id}
        method: PUT
        content: An object containing course fields
        return: null
      - name: bulk update
        description: Modify multiple courses
        path: courses
        method: PUT
        content: Up to 50 courses can be updated at a time by wrapping your response in 'courses', with course fields wrapped in 'course'
        return: The Schoology ID of each course updated, or an error message if there was a problem creating the course.
      - name: delete
        description: Delete a course (cannot be undone)
        path: courses/{id}
        method: DELETE
        content: null
        return: null
      - name: bulk delete
        description: Delete up to 50 courses (cannot be undone). Comma-separated Schoology IDs are passed in the query string with the course_ids parameter.
        path: courses/{id}
        method: DELETE
        content: null
        return: null
  - name: Course Section
    description: Teachers and students are enrolled into course sections; each section must belong to a parent course.
    urls:
      - sections
      - sections/{id}
    operations:
      - name: create
        description: Create a course section
        path: courses/{course_id}/sections
        method: POST
        content: An object containing course section fields
        return: An object containing course section fields
      - name: bulk create
        description: "Create multiple sections at a time. The following parameters can be added to this endpoint:"
        parameters:
          update_existing: Set this to 1 (e.g. ?update_existing=1) in order update existing sections, matched by the 'section_code' and 'grading_periods' fields. Without this parameter, creation will fail if a pre-existing section has the same 'section_code' for the given 'grading_periods' as a passed section object.
        path: courses/{course_id}/sections
        method: POST
        content: Multiple sections can be created at a time (up to 50) by wrapping your response in 'sections' with section fields wrapped in 'section'.
        return: The API endpoint (location) of each sectioncreated, or an error message if there was a problem creating the section.
      - name: bulk copy
        description: Copy existing sections and their content into new or existing sections
        parameters:
          source_section_id or source_section_school_code: the identifier of the section getting copied - required
          section_id or section_school_code or section_code: |-
            required
            - if section_id is provided then we assume section exists - check permissions, make sure section has no content, and then just copy content to existing section
            - if section_school_code is provided then check if section_school_code exists.
              - If exists, check if section is empty and then copy contents to existing section.
              - If does not exist then create new section and then copy contents to new section.
            - If section_code is provided then try and create new section
          course_id or course_code: the identifier of the parent course that the copied section will live in - required
          title - the title of the new section: required
          grading_periods: the grading_periods the new section with span - required
          description: the description of the new section - optional
          synced: If set to 1 course section fields (section_school_code, grading_periods) will not be editable. If not set, "synced" property will be inherited from source section - optional
          enroll_user: Set this to 1 (e.g. ?enroll_user=1) in order enroll the user making the API call into the newly copied section
        path: sections/copy
        method: POST
      - name: list
        description: "View a list of sections for a course (paged). The following parameters can be added to this path:"
        parameters:
          include_past: Set this to 1 to include sections from expired/past grading periods.
        path: courses/{course_id}/sections
        method: GET
        content: null
        return: A collection of section objects, each one containing course section fields
      - name: view
        description: View a specified course section
        path: sections/{id}
        method: GET
        content: null
        return: An object containing course section fields
      - name: update
        description: Modify a course
        path: sections/{id}
        method: PUT
        content: An object containing course section fields
        return: null
      - name: bulk update
        description: Modify multiple sections
        path: sections
        method: PUT
        content: Up to 50 sections can be updated at a time by wrapping your response in 'sections', with section fields wrapped in 'section'.
        return: The schoology ID of each section updated, or an error message if there was a problem creating the section.
      - name: delete
        description: Delete a course (cannot be undone)
        path: sections/{id}
        method: DELETE
        content: null
        return: null
      - name: bulk delete
        description: Delete up to 50 sections. Comma-separated Schoology IDs are passed in the query string with the section_ids parameter.
        path: sections
        method: DELETE
        content: null
        return: null
      - name: Grading Category
        description: List the available grading categories for the given course section
        path: sections/{id}/grading_categories
        method: GET
      - name: Grading Scales
        description: List the available grading scales for the given course section
        path: sections/{id}/grading_scales
        method: GET
      - name: Grading Periods
        description: List the available grading periods for the given course section
        path: sections/{id}/grading_periods
        method: GET
  - name: Enrollment
    description: Enrollments are associations between users and groups or course sections.
    urls:
      - "[realm]/enrollments"
      - "[realm]/enrollments/{id}"
      - "[realm]/accesscode"
    realms:
      - enrollments
      - sections/{section_id}
      - groups/{group_id}
    operations:
      - name: create
        description: Create an enrollment
        path: "[realm]/enrollments"
        method: POST
        content: An object containing enrollment fields
        return: An object containing enrollment fields
      - name: create
        description: Create an enrollment with an access code
        path: "[realm]/accesscode"
        method: POST
        content: "An object containing an access code.  The object will look like {\"access_code\" : \"VCVKF-4MJG9\"}."
        return: An object containing enrollment fields
      - name: bulk create - single realm
        description: Create multiple enrollments at a time in one realm
        path: "[realm]/enrollments"
        method: POST
        content: Multiple enrollments can be created at a time (up to 50) by wrapping your response in 'enrollments', with enrollment fields wrapped in 'enrollment'.
        return: The API endpoint (location) of each enrollment created, or an error message if there was a problem creating the enrollment.
      - name: bulk create - multi realm
        description: Create multiple enrollments across multiple realms at one time
        path: enrollments
        method: POST
        content: |-
          Multiple enrollments can be created at a time (up to 50) by wrapping your response in 'enrollments', with enrollment fields wrapped in 'enrollment'. Along with the base enrollment fields include realm [group, section] and group_id or section_id in the enrollment objects.  Each enrollment object would look something like
          The whole body will look something like:
        return: The API endpoint (location) of each enrollment created, or an error message if there was a problem creating the enrollment.
      - name: course enrollment import
        description: Create and update many course enrollments at a time by grading_period_id, course_code, section_code, and user unique_id. This this endpoint does not require you to know the Schoology IDs for each course, section, or user, this can be used for easy synchronization. You are required, however, to pass a Schoology grading period ID (or multiple, comma-separated IDs). For example, if you pass 5,6,7 as a grading_period_id, you will be importing into sections that span all three grading periods for the given course_code/section_code combination. This endpoint is only available for courses (and not for groups).
        path: enrollments/import/course/[grading_period_id]
        method: POST
        content: Multiple enrollments can be created at a time (up to 50), and require a course course_code, section section_code, and user school_uid. You can also pass admin to mark an enrollment as a teacher, or delete to remove an enrollment.
        return: The API endpoint (location) of each enrollment created, or an error message if there was a problem creating the enrollment.
      - name: course enrollment import alternative
        description: Create and update multiple course enrollments using section_school_code and user unique_id. This is similar to the course enrollment import above with the exception of not having to provide the grading_period_id. Instead, unique section_school_code values are used to determine the sections for each enrollment.
        path: enrollments/import/course
        method: POST
        content: Multiple enrollments can be created at a time (up to 50), and require a course section section_school_code and user school_uid. You can also pass admin to mark an enrollment as a teacher, or delete to remove an enrollment.
        return: The API endpoint (location) of each enrollment created, or an error message if there was a problem creating the enrollment.
      - name: list
        description: |-
          View a list of enrollments (paged). The following query strings can (optionally) be appended to the path to filter results:
          For each of the above query strings, you can specify a coma delimited list of values. Retrieving this list without specifying the above parameters will return a paged list of all enrollments in the given realm.
        parameters:
          uid: filter enrollments for a given user
          enrollment_status: filter enrollments for a given enrollment status (1-5)
          type: "filter enrollments by an enrollment type. Possible values: ['admin', 'member']"
          picture_size: "specify size of profile picture returned with this user.  Possible values: ['big', 'reg', 'sm', 'tiny']"
        path: "[realm]/enrollments"
        method: GET
        content: null
        return: A collection of enrollment objects, each one containing enrollment fields
      - name: view
        description: View a specified enrollment
        path: "[realm]/enrollments/{id}"
        method: GET
        content: null
        return: An object containing enrollment fields
      - name: update
        description: Modify an enrollment
        path: "[realm]/enrollments/{id}"
        method: PUT
        content: An object containing enrollment fields
        return: null
      - name: bulk update
        description: Modify multiple enrollments
        path: "[realm]/enrollments"
        method: PUT
        content: Up to 50 enrollments can be updated at a time by wrapping your response in 'enrollments', with enrollment fields wrapped in 'enrollment'.
        return: The schoology ID of each enrollment updated, or an error message if there was a problem creating the enrollment.
      - name: delete
        description: Delete an enrollment (cannot be undone)
        path: "[realm]/enrollments/{id}"
        method: DELETE
        content: null
        return: null
      - name: bulk delete
        description: Delete up to 50 enrollments. Comma-separated Schoology IDs are passed in the query string with the enrollment_ids parameter.
        path: enrollments?enrollment_ids=[comma-separated-enrollment-ids]
        method: DELETE
        content: null
        return: null
  - name: Event
    description: Events can be created for users, courses, groups, schools, or districts; all events automatically feed into the "upcoming" and "calender" portions of the site.
    urls:
      - "[realm]/events"
      - "[realm]/events/{id}"
    realms:
      - districts/{district_id}
      - schools/{school_id}
      - users/{user_id}
      - sections/{section_id}
      - groups/{group_id}
    operations:
      - name: create
        description: Create an event
        path: "[realm]/events"
        method: POST
        content: An object containing event fields
        return: An object containing event fields
      - name: list
        description: "View a list of events (paged). You can limit the result set by date by specify both 'start_date' and 'end_date' as key value pairs in the query string (i.e. ?start_date=[date]&end_date=[date]). The expected date format is YYYY-MM-DD or YYYYMMDD. The following query strings can (optionally) be appended to the path to filter results:"
        parameters:
          with_attachments: retrieve attachments of this piece of content.
        path: "[realm]/events"
        method: GET
        content: null
        return: A collection of event objects, each one containing event fields
      - name: view
        description: "View a specified event. The following query strings can (optionally) be appended to the path to filter results:"
        parameters:
          with_attachments: retrieve attachments of this piece of content.
        path: "[realm]/events/{id}"
        method: GET
        content: null
        return: An object containing event fields
      - name: update
        description: Modify an event
        path: "[realm]/events/{id}"
        method: PUT
        content: An object containing event fields
        return: null
      - name: delete
        description: Delete an event (cannot be undone)
        path: "[realm]/events/{id}"
        method: DELETE
        content: null
        return: null
  - name: Blog Post
    description: Blog posts can be created for all realms.
    urls:
      - "[realm]/posts"
      - "[realm]/posts/{id}"
    realms:
      - districts/{district_id}
      - schools/{school_id}
      - users/{user_id}
      - sections/{section_id}
      - groups/{group_id}
    operations:
      - name: create
        description: Create a blog post
        path: "[realm]/posts"
        method: POST
        content: An object containing blog post fields
        return: An object containing blog post fields
      - name: list
        description: View a list of posts (paged)
        path: "[realm]/posts"
        method: GET
        content: null
        return: A collection of blog post objects, each one containing blog post fields
      - name: view
        description: View a specified blog post
        path: "[realm]/posts/{id}"
        method: GET
        content: null
        return: An object containing blog post fields
      - name: update
        description: Modify a blog post
        path: "[realm]/posts/{id}"
        method: PUT
        content: An object containing blog post fields
        return: null
      - name: delete
        description: Delete a blog post (cannot be undone)
        path: "[realm]/posts/{id}"
        method: DELETE
        content: null
        return: null
  - name: Blog Post Comment
    description: Comments can be made for any blog post.
    urls:
      - "[realm]/posts/{id}/comments"
      - "[realm]/posts/{id}/comments/{id}"
    realms:
      - districts/{district_id}
      - schools/{school_id}
      - users/{user_id}
      - sections/{section_id}
      - groups/{group_id}
    operations:
      - name: create
        description: Create a blog post comment
        path: "[realm]/posts/{post_id}/comments"
        method: POST
        content: An object containing blog post fields
        return: An object containing blog post fields
      - name: list
        description: View a list of post comments (paged)
        path: "[realm]/posts/{post_id}/comments"
        method: GET
        content: null
        return: A collection of blog post objects, each one containing blog post fields
      - name: view
        description: View a specified blog post comment
        path: "[realm]/posts/{post_id}/comments/{comment_id}"
        method: GET
        content: null
        return: An object containing blog post fields
      - name: delete
        description: Delete a blog post comment (cannot be undone)
        path: "[realm]/posts/{post_id}/comments/{comment_id}"
        method: DELETE
        content: null
        return: null
  - name: Discussion Thread
    description: Discussion threads can be created for all realms except users.
    urls:
      - "[realm]/discussions"
      - "[realm]/discussions/{id}"
    realms:
      - districts/{district_id}
      - schools/{school_id}
      - sections/{section_id}
      - groups/{group_id}
    operations:
      - name: create
        description: Create a discussion thread
        path: "[realm]/discussions"
        method: POST
        content: An object containing discussion thread fields
        return: An object containing discussion thread fields
      - name: list
        description: "View a list discussion threads (paged). The following query strings can (optionally) be appended:"
        parameters:
          with_attachments: retrieve attachments of this piece of content.
          with_tags: retrieve tags of this piece of content.
        path: "[realm]/discussions"
        method: GET
        content: null
        return: A collection of discussion objects, each one containing discussion thread fields
      - name: view
        description: "View a specified discussion thread. The following query strings can (optionally) be appended:"
        parameters:
          with_attachments: retrieve attachments of this piece of content.
          with_tags: retrieve tags of this piece of content.
        path: "[realm]/discussions/{id}"
        method: GET
        content: null
        return: An object containing discussion thread fields
      - name: update
        description: Modify a discussion thread
        path: "[realm]/discussions/{id}"
        method: PUT
        content: An object containing discussion thread fields
        return: null
      - name: delete
        description: Delete a discussion thread (cannot be undone)
        path: "[realm]/discussions/{id}"
        method: DELETE
        content: null
        return: null
  - name: Discussion Reply
    description: Replies are comments made to discussion threads
    urls:
      - "[realm]/discussions/{id}/comments"
      - "[realm]/discussions/{id}/comments/{id}"
    realms:
      - districts/{district_id}
      - schools/{school_id}
      - sections/{section_id}
      - groups/{group_id}
    operations:
      - name: create
        description: Create a comment
        path: "[realm]/discussions/{post_id}/comments"
        method: POST
        content: An object containing discussion reply fields
        return: An object containing discussion reply fields
      - name: list
        description: View a list of comments (paged)
        path: "[realm]/discussions/{post_id}/comments"
        method: GET
        content: null
        return: A collection of comment objects, each one containing discussion reply fields
      - name: view
        description: View a specified comment
        path: "[realm]/discussions/{post_id}/comments/{id}"
        method: GET
        content: null
        return: An object containing discussion reply fields
      - name: delete
        description: Delete a comment (cannot be undone)
        path: "[realm]/discussions/{post_id}/comments/{id}"
        method: DELETE
        content: null
        return: null
  - name: Updates
    description: Updates are short twitter-style posts found in the Edge for a given realm
    urls:
      - "[realm]/updates"
      - "[realm]/updates/{id}"
    realms:
      - recent/
      - users/{user_id}
      - sections/{section_id}
      - groups/{group_id}
    operations:
      - name: create
        description: Create an update for the signed-in user.
        path: "[realm]/updates"
        method: POST
        content: An object containing update fields
        return: An object containing update fields
      - name: list
        description: "View a list of updates (paged). The URL '/recent' is an alias for '/users/%uid/updates' where %uid is the user id of the signed in user. The following query strings can (optionally) be appended to the path to filter results:"
        parameters:
          with_attachments: retrieve attachments and polls for this piece of content.
        path: "[realm]/updates"
        method: GET
        content: null
        return: A collection of update objects, each one containing update fields
      - name: view
        description: "View a specified update. The following query strings can (optionally) be appended to the path to filter results:"
        parameters:
          with_attachments: retrieve attachments of this piece of content.
        path: "[realm]/updates/{id}"
        method: GET
        content: null
        return: An object containing update fields
      - name: delete
        description: Delete an update (cannot be undone)
        path: "[realm]/updates/{id}"
        method: DELETE
        content: null
        return: null
      - name: update
        description: Edit the body of an update.  Note that if somebody other than the user who created the update (e.g. an Admin) edits the update, the User ID will not be updated.
        path: "[realm]/updates/{id}"
        method: PUT
        content: An object containing update fields
        return: An object containing update fields
  - name: Reminders
    description: Reminders are user notifications reminding them to complete an action for a given realm
    urls:
      - /reminders/type
      - "[realm]/reminders/type"
    realms:
      - sections/{section_id}
    operations:
      - name: list
        description: View a list of reminders across all realms for a specific type.
        parameters:
          with_attachments: retrieve attachments  for this piece of content.
        path: reminders/{type}
        method: GET
        content: null
        return: A collection of reminder objects
      - name: list
        description: View a list of reminders for a specific realm for a specific type.
        parameters:
          with_attachments: retrieve attachments  for this piece of content.
        path: "{realm}/{realm_id}/reminders/{type}"
        method: GET
        content: null
        return: A collection of reminder objects
  - name: Update Comment
    description: Update Comments are comments made on updates found in the Edge for a given realm
    urls:
      - "[realm]/updates/{update_id}/comments"
    realms:
      - users/{user_id}
      - sections/{section_id}
      - groups/{group_id}
    operations:
      - name: create
        description: Create a comment
        path: "[realm]/updates/{update_id}/comments"
        method: POST
        content: An object containing comment fields
        return: An object containing comment fields
      - name: list
        description: View a list of comments (paged)
        path: "[realm]/updates/{update_id}/comments"
        method: GET
        content: null
        return: A collection of comment objects, each one containing comment fields
      - name: view
        description: View a specified comment
        path: "[realm]/updates/{update_id}/comments/{id}"
        method: GET
        content: null
        return: An object containing comment fields
      - name: delete
        description: Delete a comment (cannot be undone)
        path: "[realm]/updates/{update_id}/comments/{id}"
        method: DELETE
        content: null
        return: null
  - name: Media Album
    description: Media albums contain audio,video and images with captions and tagging.
    urls:
      - "[realm]/albums"
      - "[realm]/albums/{album_id}"
      - "[realm]/albums/{album_id}/content"
      - "[realm]/albums/{album_id}/content/{album_content_id}"
    realms:
      - sections/{section_id}
      - groups/{group_id}
    operations:
      - TODO
  - name: Media Album Comments
    description: Media Album Comments are comments made on individual content within media albums
    urls:
      - album/{id}/content/{content_id}/comments
    operations:
      - TODO
  - name: Documents
    description: Documents are standalone File/Links
    urls:
      - "[realm]/documents"
      - "[realm]/documents/{id}"
    operations:
      - name: create
        description: Create a Document
        path: "[realm]/documents"
        method: POST
        content: An object containing document fields. 'url' or 'file-attachments' are required.  If both are given, the 'file-attachments' will be respected and 'url' ignored
        return: An object containing document fields
      - name: list
        description: "View a list of documents (paged). The following query string can (optionally) be appended:"
        parameters:
          with_tags: retrieve tags of this piece of content.
        path: "[realm]/documents"
        method: GET
        content: null
        return: A collection of document objects, each one containing document fields
      - name: view
        description: "View a specified document. The following query string can (optionally) be appended:"
        parameters:
          with_tags: retrieve tags of this piece of content.
        path: "[realm]/documents/{id}"
        method: GET
        content: null
        return: An object containing document fields
      - name: update
        description: Modify a document.  Title and published/unpublished can be changed
        path: "[realm]/documents/{id}"
        method: PUT
        content: An object containing document fields
        return: null
      - name: delete
        description: Delete a document (cannot be undone)
        path: "[realm]/documents/{id}"
        method: DELETE
        content: null
        return: null
  - name: Grading Scales
    description: Grading scales allow you to use non-numeric notations within grades (eg A+, etc)
    urls:
      - sections/{section_id}/grading_scales
    operations:
      - name: view
        description: View a grading scale
        path: sections/{section_id}/grading_scales
        method: GET
        content: null
        return: An object containing grading scale fields
  - name: Grading Rubrics
    description: Grading rubrics allow you to grade assignments and discussions using a standard of performance for your students.
    urls:
      - sections/{section_id}/grading_rubrics
      - sections/{section_id}/grading_rubrics/{grading_rubric_id}
    operations:
      - name: list
        description: List all grading rubrics in a course section
        path: sections/{section_id}/grading_rubrics
        method: GET
        content: null
        return: An object containing grading rubric fields
      - name: view
        description: View a  grading rubric in a course section
        path: sections/{section_id}/grading_rubrics/{grading_rubric_id}
        method: GET
        content: null
        return: An object containing grading rubric fields
  - name: Grading Categories
    description: Grading categories are required for grading. Assignments without categories will be ungraded.
    urls:
      - sections/{section_id}/grading_categories
    operations:
      - name: Bulk Create
        description: Create one or more grading categories in a section
        path: sections/{section_id}/grading_categories
        method: POST
        content: An object containing grading category fields
      - name: List
        description: List grading categories
        path: sections/{section_id}/grading_categories
        method: GET
        content: null
        return: An object containing grading category fields
      - name: View
        description: View a specific grading category in a section
        path: sections/{section_id}/grading_categories/{gc_id}
        method: GET
        content: null
        return: An object containing grading category fields
      - name: Update
        description: Update a single grading category in a section
        path: sections/{section_id}/grading_categories/{gc_id}
        method: PUT
        content: An object containing grading category fields
      - name: Bulk Update
        description: Update one or more grading categories in a section
        path: sections/{section_id}/grading_categories
        method: PUT
        content: An object containing grading category fields
      - name: Delete
        description: Delete a grading category (cannot be undone).
        path: sections/{section_id}/grading_categories/{gc_id}
        method: DELETE
        content: null
        return: null
  - name: Grading Groups
    description: Grading groups are groups of students within a course that can be assigned specific content.
    urls:
      - sections/{section_id}/grading_groups
    operations:
      - name: Bulk Create
        description: Create one or more grading groups in a section
        path: sections/{section_id}/grading_groups
        method: POST
        content: An object containing grading group fields
      - name: List
        description: List grading groups
        path: sections/{section_id}/grading_groups
        method: GET
        content: null
        return: An object containing grading group fields
      - name: View
        description: View a specific grading group in a section
        path: sections/{section_id}/grading_groups/{gg_id}
        method: GET
        content: null
        return: An object containing grading group fields
      - name: Update
        description: Update a single grading group in a section
        path: sections/{section_id}/grading_groups/{gg_id}
        method: PUT
        content: An object containing grading group fields
      - name: Delete
        description: Delete a grading group (cannot be undone).
        path: sections/{section_id}/grading_groups/{gg_id}
        method: DELETE
        content: null
        return: null
  - name: Assignment
    description: Assignments are containers for coursework and test/quizzes. Every assignment has an entry in the gradebook.
    urls:
      - sections/{section_id}/assignments
      - sections/{section_id}/assignments/{id}
    operations:
      - eeee
  - name: Assignment Comments
    description: Comments can be made for any assignment.
    urls:
      - sections/{section_id}/assignments/{id}/comments
      - sections/{section_id}/assignments/{id}/comments/{id}
    operations:
      - eeee
  - name: Grade
    description: Grades are associated with an enrollment and an assignment.
    urls:
      - sections/{section_id}/grades
    operations:
      - eeee
  - name: Attendance
    description: Attendance statuses are associated with an enrollment and a specific date.
    urls:
      - sections/{section_id}/attendance
      - sections/{section_id}/attendance/{id}
    operations:
      - eeee
  - name: Submissions
    description: Submissions are uniquely identified by a Section ID, Grade Item ID, User ID, and Revision ID.
    urls:
      - sections/{section_id}/submissions/{grade_item_id}
      - sections/{section_id}/submissions/{grade_item_id}/{action}
      - sections/{section_id}/submissions/{grade_item_id}/{user_id}
      - sections/{section_id}/submissions/{grade_item_id}/{user_id}/revisions
      - sections/{section_id}/submissions/{grade_item_id}/{user_id}/revisions/{revision_id}
      - sections/{section_id}/submissions/{grade_item_id}/{user_id}/comments
      - sections/{section_id}/submissions/{grade_item_id}/{user_id}/comments/{comment_id}
    operations:
      - eeee
  - name: Course Folder
    description: A course folder request returns all the contents of the folder with pointers to that piece of content if the API supports it.  This includes child Folders.
    urls:
      - courses/{section_id}/folder/{folder_id}
    operations:
      - eeee
  - name: Pages
    description: Pages can be used to display any sort of content. HTML can be used to format the content of the page to anything you like.
    urls:
      - sections/{section_id}/pages
      - sections/{section_id}/pages/{id}
    operations:
      - eeee
  - name: Scorm Package
    description: Scorm packages are containers for a Sharable Content Object Reference Model that can be integrated with Schoology.
    urls:
      - sections/{section_id}/packages
      - sections/{section_id}/packages/{id}
    operations:
      - eeee
  - name: Web Content Package
    description: Web Content Packages are website files, compressed in .zip format, that can be added to Schoology course sections.
    urls:
      - sections/{section_id}/web_packages
      - sections/{section_id}/web_packages/{id}
    operations:
      - eeee
  - name: Completion
    description: Each user enrolled in a course section has a completion object with information about the student's progress in the section.
    urls:
      - sections/{section_id}/completion
      - sections/{section_id}/completion/user/{uid}
    operations:
      - eeee
  - name: Friend Request
    description: Friend requests can be sent from/received by other Schoology users in your network.
    urls:
      - users/{user_id}/requests/friends
      - users/{user_id}/requests/friends/{id}
    operations:
      - eeee
  - name: Invite
    description: Users can receive requests to join course sections and groups.
    urls:
      - users/{user_id}/invites/[realm]
      - users/{user_id}/invites/[realm]/{invite_id}
    realms:
      - sections
      - groups
    operations:
      - eeee
  - name: Network
    description: View a list of users in the given user's network
    urls:
      - users/{user_id}/network
      - users/{user_id}/network
    operations:
      - eeee
  - name: Grades
    description: View a list of the given user's grades
    urls:
      - users/{id}/grades
    operations:
      - eeee
  - name: Grading Period
    description: Grading periods (marking periods) determine when a course section is active.
    urls:
      - gradingperiods
      - gradingperiods/{id}
    operations:
      - eeee
  - name: Role
    description: Every user is associated with a collection permissions called roles.
    urls:
      - roles
      - roles/{id}
    operations:
      - eeee
  - name: Private Messaging
    description: Private messages are 'e-mail style' messages that can be sent and shared between multiple users.
    urls:
      - messages
      - messages/[message folder]
      - messages/[message folder]/{message_id}
      - inbox
      - sent
    operations:
      - eeee
  - name: Search
    description: Search users,schools,groups and courses.
    urls:
      - search
    operations:
      - eeee
  - name: Resource Collections
    description: Resource Collections are containers for user and group resource templates.
    urls:
      - collections
      - collections/[collection_id]
    operations:
      - eeee
  - name: Resource Templates
    description: Resource templates are objects placed in Resource Collections.  Each template has an assigned type (e.g. Document, Assignment, Discussion).
    urls:
      - collections/[collection_id]/resources
      - "[realm]/[realm_id]/resources"
    operations:
      - eeee
  - name: Multi-get
    description: Make multiple GET calls with a single POST call and receive each response body in full in a single compiled response.
    urls:
      - multiget
    operations:
      - eeee
  - name: Multi-options
    description: Make multiple OPTIONS calls with a single POST call and receive reach response body in full in a single compiled response.
    urls:
      - multioptions
    operations:
      - eeee
templates:
  resource:
    - faa: waaa
      la:
        uh:
          lol: wow
    - name: aaaa
      description: aaaa
      urls:
        - aaaa
      operations:
        - name: aaaa
          description: aaaa
          path: aaaa
          method: GET
          content: null
          return: null
  operation:
    - ta: weee
      wow: indents
    - name: aaaa
      description: aaaa
      path: aaaa
      method: GET
      content: null
      return: null
